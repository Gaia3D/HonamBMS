<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="honam.persistence.BridgeDroneFileMapper">

	<!-- 교량 드론 파일 등록 -->
	<insert id="insertBridgeDroneFile" parameterType="bridgeDroneFile">
		/* insertBridgeDroneFile */
		<selectKey keyProperty="uploadDroneFileId" resultType="Integer" order="BEFORE">
    		SELECT NEXTVAL('bridge_drone_file_seq')
  		</selectKey>
		INSERT INTO bridge_drone_file(
			upload_drone_file_id, ogc_fid, user_id,
			file_name, file_real_name, file_path, file_sub_path, file_size,
			file_ext, error_message, create_date, location, altitude
		) VALUES (
			#{uploadDroneFileId}, #{ogcFid}, #{userId},
			#{fileName}, #{fileRealName}, #{filePath}, #{fileSubPath}, #{fileSize},
			#{fileExt}, #{errorMessage}, #{createDate}, ST_GeomFromText(#{location}, 4326), #{altitude}
		)
	</insert>

	<!-- 교량 드론 파일 목록 건수 -->
	<select id="getBridgeDroneFileTotalCount" parameterType="bridgeDroneFile" resultType="long">
		/* getBridgeDroneFileTotalCount */
		SELECT COUNT(DISTINCT upload_drone_file_id)
		FROM bridge_drone_file
		<where>
			ogc_fid = #{ogcFid}
			<if test="createDate != null">
			AND date(create_date) = to_date(#{createDate},'YYYY-MM-DD')
			</if>
		</where>
	</select>

	<!-- 교량 드론 파일 목록 조회 -->
	<select id="getBridgeDroneFile" parameterType="bridgeDroneFile" resultType="bridgeDroneFile">
		/* getBridgeDroneFile */
		SELECT *, ST_X(location) AS longitude, ST_Y(location) AS latitude
		FROM bridge_drone_file
		<where>
			ogc_fid = #{ogcFid}
			<if test="createDate != null">
			AND date(create_date) = to_date(#{createDate},'YYYY-MM-DD')
			</if>
		</where>
	    ORDER BY upload_drone_file_id
	    OFFSET #{offset} LIMIT #{limit}
	</select>
	
	<!-- 교량 드론 파일 목록 전체 조회, 쿼리를 나눌게 아니라 옾셋을 쓰니마니만 결정하면 될것같은데-->
	<select id="getBridgeDroneFileAll" parameterType="bridgeDroneFile" resultType="bridgeDroneFile">
		/* getBridgeDroneFile */
		SELECT *, ST_X(location) AS longitude, ST_Y(location) AS latitude
		FROM bridge_drone_file
		<where>
			ogc_fid = #{ogcFid}
			<if test="createDate != null">
			AND date(create_date) = to_date(#{createDate},'YYYY-MM-DD')
			</if>
		</where>
	    ORDER BY upload_drone_file_id
	</select>
	
	<!-- 교량 드론 파일 촬영 날짜 목록 조회 -->
	<select id="getBridgeDroneFileCreateDateList" parameterType="bridgeDroneFile" resultType="java.util.Date">
		/* getBridgeDroneFileCreateDateList */
		SELECT date(create_date) AS create_date
		FROM bridge_drone_file
		WHERE ogc_fid = #{ogcFid}
		group by date(create_date)
	</select>

	<!-- 교량 드론 파일 수정 -->
	<update id="updateBridgeDroneFile" parameterType="bridgeDroneFile">
		/* updateBridgeDroneFile */
		UPDATE bridge_drone_file
		<set>
			<if test="fileName != null and fileName != ''">
				file_name = #{fileName},
			</if>
			<if test="fileRealName != null and fileRealName != ''">
				file_real_name = #{fileRealName},
			</if>
			<if test="filePath != null and filePath != ''">
				file_path = #{filePath},
			</if>
			<if test="fileSubPath != null and fileSubPath != ''">
				file_sub_path = #{fileSubPath},
			</if>
		</set>
		WHERE upload_drone_file_id = #{uploadDroneFileId}
	</update>

	<!-- 교량 드론 파일 삭제 -->
	<delete id="deleteBridgeDroneFile" parameterType="bridgeDroneFile">
		/* deleteBridgeDroneFile */
		DELETE FROM bridge_drone_file
		WHERE upload_drone_file_id = #{uploadDroneFileId}
		<if test="userId != null and userId != ''">
			AND user_id = #{userId}
		</if>
	</delete>

</mapper>