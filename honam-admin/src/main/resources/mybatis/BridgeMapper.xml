<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="honam.persistence.BridgeMapper">

	<!-- Sdo 목록(geom 은 제외) -->
	<select id="getListSdoExceptGeom" resultType="skSdo">
		/* getListSdoExceptGeom */
		SELECT 
			SUBSTR(bjcd, 1, 2) AS sdo_code, name 
		FROM sk_sdo
		WHERE bjcd IN ('2900000000', '4500000000', '4600000000')
		ORDER BY name
	</select>

	<!-- Sgg 목록(geom 은 제외) -->
	<select id="getListSggBySdoExceptGeom" parameterType="string" resultType="skSgg">
		/* getListSggBySdoExceptGeom */
		SELECT 
			SUBSTR(bjcd, 3, 3) AS sgg_code, name
		FROM sk_sgg
		WHERE bjcd LIKE #{sdoCode} || '%'
		ORDER BY name
	</select>

	<!-- 선택한 시도의 center point를 구함 -->
	<select id="getCentroidSdo" parameterType="skSdo" resultType="string">
		/* getCentroidSdo */
		SELECT ST_AsText(ST_Centroid(A.geom))
		FROM (
			SELECT wkb_geometry as geom
			FROM sk_sdo
			WHERE bjcd = #{bjcd}
			ORDER BY bjcd LIMIT 1
		) A
	</select>

	<!-- 선택한 시군구의 center point를 구함 -->
	<select id="getCentroidSgg" parameterType="skSgg" resultType="string">
		/* getCentroidSgg */
		SELECT ST_AsText(ST_Centroid(A.geom))
		FROM (
			SELECT wkb_geometry as geom
			FROM sk_sgg
			WHERE bjcd = #{bjcd}
			ORDER BY bjcd LIMIT 1
		) A
	</select>

	<!-- 선택한 교량의 center point를 구함 -->
	<select id="getListCentroidBridge" resultType="bridge">
		/* getListCentroidBridge */
		SELECT brg_nam, grade, ST_X(ST_Centroid(wkb_geometry)) AS longitude, ST_Y(ST_Centroid(wkb_geometry)) AS latitude FROM bridge 
	</select>

	<!-- 관리주체 목록 -->
	<select id="getListMngOrg" resultType="bridge">
		/* getListMngOrg */
		SELECT DISTINCT  mng_org
 		FROM bridge
 		WHERE NOT mng_org is NULL
		ORDER BY mng_org
	</select>

    <!-- Bridge(교량) 총 건수 -->
	<select id="getBridgeTotalCount" parameterType="bridge" resultType="long">
		/* getBridgeTotalCount */
		SELECT COUNT(DISTINCT A.ogc_fid)
		FROM (
			SELECT
				A.ogc_fid,
				A.fac_sido,
				A.fac_sgg,
				A.mng_org,
				A.brg_nam
			FROM bridge A
			LEFT JOIN sk_sdo B ON A.fac_sido = B.name
			LEFT JOIN sk_sgg C ON A.fac_sgg = C.name
			<where>
				<if test="sdoCode != null and sdoCode != ''">
				AND B.bjcd LIKE #{sdoCode} || '%'
				</if>
				<if test="sggCode != null and sggCode != ''">
				AND C.bjcd LIKE '%' || #{sggCode} || '%'
				</if>
				<if test="mngOrg != null and mngOrg != ''">
				AND A.mng_org = #{mngOrg}
				</if>
				<if test="brgNam != null and brgNam != ''">
				AND A.brg_nam LIKE #{brgNam} || '%'
				</if>
				<if test='bridgeType == "sat"'>
				AND EXISTS (SELECT 1 FROM sat WHERE fac_num = A.fac_num)
				</if>
				<if test='bridgeType == "sensor"'>
				AND EXISTS (SELECT 1 FROM sensorid WHERE fac_num = A.fac_num)
				</if>
				<if test='bridgeType == "drone"'>
				AND EXISTS (SELECT 1 FROM bridge_drone_file WHERE ogc_fid = A.ogc_fid)
				</if>
				<if test='bridgeType == "model"'>
				AND A.model = 1
				</if> 
			</where>
		) A
	</select>

	<!-- Bridge(교량) 전체 목록 -->
	<select id="getListBridgeAll" resultType="bridge">
		/* getListBridgeAll */
		SELECT DISTINCT A.ogc_fid as gid, A.brg_nam, A.end_amd, A.grade
		FROM bridge A
		LEFT JOIN sk_sdo B ON A.fac_sido = B.name
		LEFT JOIN sk_sgg C ON A.fac_sgg = C.name
		ORDER BY A.brg_nam
	</select>

	<!-- Bridge(교량) 목록 -->
	<select id="getListBridge" parameterType="bridge" resultType="bridge">
		/* getListBridge */
		SELECT 
			DISTINCT A.ogc_fid as gid, 
			A.brg_nam, 
			A.end_amd, 
			A.grade,
			A.brg_nam,
			ST_X(ST_Centroid(A.wkb_geometry)) AS longitude, 
			ST_Y(ST_Centroid(A.wkb_geometry)) AS latitude
		FROM bridge A
		LEFT JOIN sk_sdo B ON A.fac_sido = B.name
		LEFT JOIN sk_sgg C ON A.fac_sgg = C.name
		<where>
			<if test="sdoCode != null and sdoCode != ''">
			AND B.bjcd LIKE #{sdoCode} || '%'
			</if>
			<if test="sggCode != null and sggCode != ''">
			AND C.bjcd LIKE '%' || #{sggCode} || '%'
			</if>
			<if test="mngOrg != null and mngOrg != ''">
			AND A.mng_org = #{mngOrg}
			</if>
			<if test="brgNam != null and brgNam != ''">
			AND A.brg_nam LIKE #{brgNam} || '%'
			</if>
			<if test='bridgeType == "sat"'>
			AND EXISTS (SELECT 1 FROM sat WHERE fac_num = A.fac_num)
			</if>
			<if test='bridgeType == "sensor"'>
			AND EXISTS (SELECT 1 FROM sensorid WHERE fac_num = A.fac_num)
			</if>
			<if test='bridgeType == "drone"'>
			AND EXISTS (SELECT 1 FROM bridge_drone_file WHERE ogc_fid = A.ogc_fid)
			</if>
			<if test='bridgeType == "model"'>
			AND A.model = 1
			</if> 
		</where>
		ORDER BY A.brg_nam
		OFFSET #{offset} LIMIT #{limit}
	</select>

	<!-- 교량 그룹 교량 목록 -->
	<select id="getListBridgeByBridgeGroupId" parameterType="int" resultType="bridge">
		/* getListBridgeByBridgeGroupId */
		SELECT A.*, ST_X(ST_AsText(ST_Centroid(ST_Transform(A.wkb_geometry, 4326)))) AS longitude, ST_Y(ST_AsText(ST_Centroid(ST_Transform(A.wkb_geometry, 4326)))) AS latitude
		FROM bridge A
		WHERE A.gru_num = #{bridgeGroupId}
	</select>

	<!-- Bridge(교량) 정보 조회 -->
	<select id="getBridge" parameterType="bridge" resultType="bridge">
		/* getBridge */
		SELECT DISTINCT ogc_fid as gid, ufid, fac_num, brg_nam, mng_org, fac_sido, fac_sgg, fac_emd, fac_ri, fac_gra, end_amd, dsn_wet,
			brg_len, brg_hit, eff_wid, tot_wid, spa_cnt, max_len, tra_cnt, usp_rep, dpi_rep, wkb_geometry as geom,
			gru_num, bridge_cm, bridge_lcc, grade, model
		FROM bridge
		WHERE ogc_fid = #{gid}
	</select>


	<!-- Bridge(교량) 정보 등록 -->
	<insert id="insertBridge" parameterType="bridge">
		/* insetBridge */

	</insert>
	<!-- Bridge(교량) 정보 수정 -->
	<update id="updateBridge" parameterType="bridge">
		/* updateBridge */

	</update>

</mapper>